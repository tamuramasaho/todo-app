// Code generated by MockGen. DO NOT EDIT.
// Source: repository/todo.go

// Package mock_todos is a generated GoMock package.
package mock_todos

import (
	entity "github.com/Tech-Design-Inc/sirius/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockITodo is a mock of ITodo interface
type MockITodo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoMockRecorder
}

// MockITodoMockRecorder is the mock recorder for MockITodo
type MockITodoMockRecorder struct {
	mock *MockITodo
}

// NewMockITodo creates a new mock instance
func NewMockITodo(ctrl *gomock.Controller) *MockITodo {
	mock := &MockITodo{ctrl: ctrl}
	mock.recorder = &MockITodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITodo) EXPECT() *MockITodoMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockITodo) All(e *entity.Todos) (*entity.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", e)
	ret0, _ := ret[0].(*entity.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockITodoMockRecorder) All(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockITodo)(nil).All), e)
}

// ByWord mocks base method
func (m *MockITodo) ByWord(e *entity.Todos, word string) (*entity.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByWord", e, word)
	ret0, _ := ret[0].(*entity.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByWord indicates an expected call of ByWord
func (mr *MockITodoMockRecorder) ByWord(e, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByWord", reflect.TypeOf((*MockITodo)(nil).ByWord), e, word)
}

// Create mocks base method
func (m *MockITodo) Create(e *entity.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockITodoMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodo)(nil).Create), e)
}

// ByID mocks base method
func (m *MockITodo) ByID(e *entity.Todo, id int64) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", e, id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID
func (mr *MockITodoMockRecorder) ByID(e, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockITodo)(nil).ByID), e, id)
}

// Update mocks base method
func (m *MockITodo) Update(e *entity.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockITodoMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodo)(nil).Update), e)
}

// Delete mocks base method
func (m *MockITodo) Delete(e *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockITodoMockRecorder) Delete(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodo)(nil).Delete), e)
}

// ByTime mocks base method
func (m *MockITodo) ByTime(e *entity.Todos, now time.Time) (*entity.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByTime", e, now)
	ret0, _ := ret[0].(*entity.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByTime indicates an expected call of ByTime
func (mr *MockITodoMockRecorder) ByTime(e, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByTime", reflect.TypeOf((*MockITodo)(nil).ByTime), e, now)
}

// SendToSlack mocks base method
func (m *MockITodo) SendToSlack(msg string, entities *entity.Todos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToSlack", msg, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToSlack indicates an expected call of SendToSlack
func (mr *MockITodoMockRecorder) SendToSlack(msg, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSlack", reflect.TypeOf((*MockITodo)(nil).SendToSlack), msg, entities)
}
