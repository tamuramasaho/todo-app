// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/todo.go

// Package mock_todos is a generated GoMock package.
package mock_todos

import (
	entity "github.com/tamuramasaho/todo-app/entity"
	form "github.com/tamuramasaho/todo-app/form"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITodo is a mock of ITodo interface
type MockITodo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoMockRecorder
}

// MockITodoMockRecorder is the mock recorder for MockITodo
type MockITodoMockRecorder struct {
	mock *MockITodo
}

// NewMockITodo creates a new mock instance
func NewMockITodo(ctrl *gomock.Controller) *MockITodo {
	mock := &MockITodo{ctrl: ctrl}
	mock.recorder = &MockITodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITodo) EXPECT() *MockITodoMockRecorder {
	return m.recorder
}

// GetList mocks base method
func (m *MockITodo) GetList() (*entity.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList")
	ret0, _ := ret[0].(*entity.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockITodoMockRecorder) GetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockITodo)(nil).GetList))
}

// GetListByWord mocks base method
func (m *MockITodo) GetListByWord(word string) (*entity.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByWord", word)
	ret0, _ := ret[0].(*entity.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByWord indicates an expected call of GetListByWord
func (mr *MockITodoMockRecorder) GetListByWord(word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByWord", reflect.TypeOf((*MockITodo)(nil).GetListByWord), word)
}

// Create mocks base method
func (m *MockITodo) Create(form *form.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", form)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockITodoMockRecorder) Create(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodo)(nil).Create), form)
}

// GetByID mocks base method
func (m *MockITodo) GetByID(id int64) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockITodoMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITodo)(nil).GetByID), id)
}

// Update mocks base method
func (m *MockITodo) Update(id int64, form *form.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, form)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockITodoMockRecorder) Update(id, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodo)(nil).Update), id, form)
}

// Delete mocks base method
func (m *MockITodo) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockITodoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodo)(nil).Delete), id)
}

// SendReminder mocks base method
func (m *MockITodo) SendReminder() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReminder")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReminder indicates an expected call of SendReminder
func (mr *MockITodoMockRecorder) SendReminder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReminder", reflect.TypeOf((*MockITodo)(nil).SendReminder))
}

// ChangeActiveness mocks base method
func (m *MockITodo) ChangeActiveness(id int64) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActiveness", id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeActiveness indicates an expected call of ChangeActiveness
func (mr *MockITodoMockRecorder) ChangeActiveness(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActiveness", reflect.TypeOf((*MockITodo)(nil).ChangeActiveness), id)
}
